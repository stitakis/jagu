apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: "de.gliderpilot.jnlp"
apply plugin: 'application'

// sourceCompatibility = '1.8'

sourceSets {
    main {
        java {
            srcDir 'src/java/launcher'
            srcDir 'src/java/service'

        }
    }
    test {
        java {
            srcDir 'test/java/launcher'
            srcDir 'test/java/integration'
        }
        resources {
            srcDir 'test/resources'
        }
    }

}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:+'
    }
}


repositories {
  mavenCentral()
  maven {
      url "https://repo.eclipse.org/content/groups/releases/"
  }
}

dependencies {
	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r'
	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.1.201504261725-r'
	compile 'commons-io:commons-io:2.4'
	compile 'org.slf4j:slf4j-simple:1.7.12'
    compile 'com.jcraft:jsch:0.1.50'
    compile 'com.googlecode.javaewah:JavaEWAH:0.7.9'
    compile 'org.apache.httpcomponents:httpclient:4.1.3'
    compile 'org.apache.commons:commons-compress:1.6'
    compile 'org.osgi:org.osgi.core:4.3.1'
    compile 'org.apache.httpcomponents:httpcore:4.1.4'
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'commons-codec:commons-codec:1.4'
    compile 'org.tukaani:xz:1.4'
    compile 'org.slf4j:slf4j-api:1.7.12'
    testCompile 'junit:junit:4.12'

    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'

}

task wrapper(type: Wrapper) {
	gradleVersion = '2.4'
}

task copyDepJars(type: Copy) {
  from configurations.compile
  into 'libs'

}


// Jetty related config
httpPort = 8080
stopPort = 9451
stopKey = 'foo'



task createRemoteBareGitRepo(type:JavaExec) {
    main = 'org.sti.jaga.itest.CreateBareRemoteGitRepoUtil'
    classpath = files(sourceSets.main.runtimeClasspath,sourceSets.test.runtimeClasspath)
}

task initializeRemoteGitRepoUtil(type:JavaExec) {
    main = 'org.sti.jaga.itest.InitializeRemoteGitRepoUtil'
    classpath = files(sourceSets.main.runtimeClasspath,sourceSets.test.runtimeClasspath)
}

task executeLauncher(type:JavaExec) {
    main = 'org.sti.jaga.Launcher'
    classpath = sourceSets.main.runtimeClasspath
}

task updateRemoteGitRepoUtil(type:JavaExec) {
    main = 'org.sti.jaga.itest.UpdateRemoteGitRepoUtil'
    classpath = files(sourceSets.main.runtimeClasspath,sourceSets.test.runtimeClasspath)
}

task deleteOutFolderContent(type: Delete) {
    delete 'out/local-repo', 'out/remote-bare-repo', 'out/remote-repo', 'out/remote-repo2'
}



task itest << {

    System.out.println('Starting integration test')

    System.out.println('Deleting content of out folder')
    tasks.deleteOutFolderContent.execute();

    // Create repo
    System.out.println('Starting CreateBareRemoteGitRepoUtil')
    tasks.createRemoteBareGitRepo.execute()

    // Commit service1 and classpath.txt
    System.out.println('Starting InitializeRemoteGitRepo')
    tasks.initializeRemoteGitRepoUtil.execute()

    new Thread(new Runnable() {
        @Override
        void run() {
            // Start launcher JavaFX app
            System.out.println('Starting Launcher')
            tasks.executeLauncher.execute()
        }
    }).start()

    // Wait
    Thread.sleep(2000);

    // Commit service2 and new classpath.txt
    System.out.println('Starting UpdateRemoteGitRepoUtil')
    tasks.updateRemoteGitRepoUtil.execute()

    // Wait
    Thread.sleep(20000);

    System.out.println('Done itest!')

}

mainClassName = "org.sti.jaga.Launcher"


jnlp {
    useVersions = true
    mainClassName = 'org.sti.jaga.Launcher'
    withXml {
        information {
            title project.name
            vendor project.group ?: project.name
        }
        security {
            'all-permissions'()
        }
    }
    signJarAddedManifestEntries = [
            'Codebase': 'http://jaga.sti.org',
            'Permissions': 'all-permissions',
            'Application-Name': "${project.name}"
    ]
    signJarParams = [alias: 'myalias', storepass: 'mystorepass']
    desc = {
        'application-desc'('main-class': "${project.jnlp.mainClassName}") {
            argument('-verbose')
        }
    }
}

task genkey << {
    ant.genkey(alias: 'myalias', storepass: 'mystorepass', dname: 'CN=Ant Group, OU=Jakarta Division, O=Apache.org, C=US')
}


war {
    from 'build/jnlp'
}

task createWarAndRun << {
    tasks.clean.execute()
    tasks.build.execute()
    tasks.createWebstartDir.execute()
    tasks.war.execute()
    tasks.jettyRunWar.execute()
}
