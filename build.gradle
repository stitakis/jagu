apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'application'

// sourceCompatibility = '1.8'


sourceSets {
    main {
        java {
            srcDir 'src/java/launcher'
            srcDir 'src/java/service'

        }
//        resources {
//            srcDir 'src/resources'
//        }
//        webapp {
//            srcDir 'src/webapp'
//        }
    }
    test {
        java {
            srcDir 'test/java/launcher'
            srcDir 'test/java/integration'
        }
        resources {
            srcDir 'test/resources'
        }
    }

}

repositories {
  mavenCentral()
  maven {
    url "https://repo.eclipse.org/content/groups/releases/"
  }
}

dependencies {
	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r'
	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.1.201504261725-r'
	compile 'commons-io:commons-io:2.4'
	compile 'org.slf4j:slf4j-simple:1.7.12'
    compile 'com.jcraft:jsch:0.1.50'
    compile 'com.googlecode.javaewah:JavaEWAH:0.7.9'
    compile 'org.apache.httpcomponents:httpclient:4.1.3'
    compile 'org.apache.commons:commons-compress:1.6'
    compile 'org.osgi:org.osgi.core:4.3.1'
    compile 'org.apache.httpcomponents:httpcore:4.1.4'
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'commons-codec:commons-codec:1.4'
    compile 'org.tukaani:xz:1.4'
    compile 'org.slf4j:slf4j-api:1.7.12'
    testCompile 'junit:junit:4.12'

    // this define flat dir dependencies here
    // compile files('artifacts/' + 'service-v0_2.jar')

    // compile group: 'commons-io', name: 'commons-io', version: '1.4'
    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'

}

// work around unnecessary timestamp in generated file which always causes dirty files in version control
// https://issues.gradle.org/browse/GRADLE-2293
//task adjustEclipseSettingsFile << {
//   ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
//      fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs')
//   }
//}
//task sortEclipseSettingsFile << {
//   new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
//}
// eclipseJdt.finalizedBy adjustEclipseSettingsFile
// eclipseJdt.finalizedBy sortEclipseSettingsFile

task wrapper(type: Wrapper) {
	gradleVersion = '2.4'
}

task copyDepJars(type: Copy) {
  from configurations.compile
  into 'libs'

}


// Jetty related config
httpPort = 8080
stopPort = 9451
stopKey = 'foo'



task createRemoteBareGitRepo(type:JavaExec) {
    main = 'org.sti.jaga.itest.CreateBareRemoteGitRepoUtil'
    classpath = files(sourceSets.main.runtimeClasspath,sourceSets.test.runtimeClasspath)
}

task initializeRemoteGitRepoUtil(type:JavaExec) {
    main = 'org.sti.jaga.itest.InitializeRemoteGitRepoUtil'
    classpath = files(sourceSets.main.runtimeClasspath,sourceSets.test.runtimeClasspath)
}

task executeLauncher(type:JavaExec) {
    main = 'org.sti.jaga.Launcher'
    classpath = sourceSets.main.runtimeClasspath
}


task itest << {

    System.out.println('Starting integration test')

    // Create repo
    System.out.println('Starting CreateBareRemoteGitRepoUtil')
    tasks.createRemoteBareGitRepo.execute()

    // Commit service1 and classpath.txt
    System.out.println('Starting InitializeRemoteGitRepo')
    tasks.initializeRemoteGitRepoUtil.execute()

    // Start launcher JavaFX app
    System.out.println('Starting Launcher')
    tasks.executeLauncher.execute()

    // Wait
    Thread.sleep(30000);

    // Commit service2 and new classpath.txt


    // Trigger update in launcher JavaFX app with robot framework
    // Verify new service was loaded


}

mainClassName = "org.sti.jaga.Launcher"


